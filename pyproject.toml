[project]
name = "data-tester"
version = "0.0.1"
description = "Plattform for testing data and ETL logic"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "pydantic",  # DTOs and data validation
    "pydantic-settings",  # for reading from ENV vars
    "polars",  # used for fixtures crunching - esp. for testcase COMPARE
    "xlsxwriter",  # required for polars to write excel
    "fastexcel",  # required for polars to read excel
    "pyarrow",  # required as backend for polars
    "pyyaml",  # read and write yaml files
    "duckdb",  # needed for demo and for e2e tests
    "fsspec",  # needed for demo, 2e2 tests and also for input finders and report storage
]

[project.optional-dependencies]
gcs = ["gcsfs"]  # needed if data is stored in GCS

[dependency-groups]
dev = [
    "ruff",  # linter / syntax checker and formatter - replaces flake8
    "mypy",  # type checker
    "pytest",  # test framework
    "coverage",  # test coverage reports
    "pygount",  # count lines of code
    "import-linter"  # enforce import rules for hexagonal architecture
]


# UV CONFIG

[tool.uv]
default-groups = ["dev"]  # uv will install dev dependency group by default


# PYTEST CONFIG

[tool.pytest.ini_options]
minversion = "8.1"
testpaths = ["tests",]
markers = [
    "skip_test: explicitely skip tests",
    "infrastructure: mark test as requiring infrastructure, e.g. a DataPlatform"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning:pydantic"
]


# COVERAGE CONFIG

[tool.coverage.run]
command_line = "-m pytest -m 'not skip_test and not infrastructure'"
source = ["src/"]  # only analyze source code in src for coverage
relative_files = true  # use relative files to be picked up by github action py-cov-action/python-coverage-comment-action@v3

[tool.coverage.report]
skip_empty = true  # empty python files like __init__.py are not included in report
show_missing = true
exclude_also = [
    "raise NotImplementedError",  # ignore abstract methods and not implemented methods
    "@(abc\\.)?abstractmethod",
]


# MYPY CONFIG

[tool.mypy]
check_untyped_defs = true  # check bodies of functions for type hints
packages = ["src", "tests"]


# RUFF CONFIG

[tool.ruff]
line-length = 90
src = ["src"]

[tool.ruff.lint]
select = ["E", "F", "W", "B"]


# IMPORT-LINTER CONFIG

[tool.importlinter]
root_package = "src"

[[tool.importlinter.contracts]]
name = "1. Domain only imports ports"
type = "forbidden"
source_modules = ["src.domain"]
forbidden_modules = [
    "src.apps",
    "src.config",
    "src.drivers",
    "src.infrastructure"
]

[[tool.importlinter.contracts]]
name = "2. Drivers only import domain ports"
type = "forbidden"
source_modules = ["src.drivers"]
forbidden_modules = [
    "src.apps",
    "src.config",
    "src.domain",
    "src.infrastructure",
    "src.infrastructure_ports"
]

[[tool.importlinter.contracts]]
name = "3. Infra only imports infra ports"
type = "forbidden"
source_modules = ["src.infrastructure"]
forbidden_modules = [
    "src.apps",
    "src.config",
    "src.domain",
    "src.domain_ports",
    "src.drivers",
]

[[tool.importlinter.contracts]]
name = "4. Ports only import DTOs"
type = "forbidden"
source_modules = [
    "src.domain_ports",
    "src.infrastructure_ports"
]
forbidden_modules = [
    "src.apps",
    "src.config",
    "src.domain",
    "src.drivers",
    "src.infrastructure",
]

[[tool.importlinter.contracts]]
name = "5. Ports and config are independent"
type = "independence"
modules = [
    "src.domain_ports",
    "src.infrastructure_ports",
    "src.config",
]

[[tool.importlinter.contracts]]
name = "5. Domain hexagons are independent"
type = "independence"
modules = [
    "src.domain.*"
]

[[tool.importlinter.contracts]]
name = "6. Apps are independent"
type = "independence"
modules = [
    "src.apps.*",
]

[[tool.importlinter.contracts]]
name = "7. Drivers are independent"
type = "independence"
modules = [
    "src.drivers.*"
]
